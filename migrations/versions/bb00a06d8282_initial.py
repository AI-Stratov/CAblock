"""initial

Revision ID: bb00a06d8282
Revises: 
Create Date: 2023-05-29 23:24:39.905527

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import sessionmaker
from app import models

# revision identifiers, used by Alembic.
revision = 'bb00a06d8282'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dict_action',
    sa.Column('code', sa.SmallInteger(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_index(op.f('ix_dict_action_code'), 'dict_action', ['code'], unique=True)
    op.create_table('dict_operation',
    sa.Column('sap_code', sa.String(length=4), nullable=False),
    sa.Column('sap_name', sa.String(length=15), nullable=True),
    sa.Column('name', sa.String(length=75), nullable=False),
    sa.Column('blocking', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('sap_code')
    )
    op.create_index(op.f('ix_dict_operation_sap_code'), 'dict_operation', ['sap_code'], unique=True)
    op.create_table('dict_system',
    sa.Column('code', sa.SmallInteger(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('can_block', sa.Boolean(), nullable=True),
    sa.Column('source_doc', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_index(op.f('ix_dict_system_code'), 'dict_system', ['code'], unique=True)
    op.create_table('dict_workflow',
    sa.Column('code', sa.String(length=5), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_index(op.f('ix_dict_workflow_code'), 'dict_workflow', ['code'], unique=True)
    op.create_table('dict_doc_type',
    sa.Column('code', sa.SmallInteger(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('fullname', sa.String(length=50), nullable=True),
    sa.Column('system_code', sa.SmallInteger(), nullable=False),
    sa.ForeignKeyConstraint(['system_code'], ['dict_system.code'], ),
    sa.PrimaryKeyConstraint('code')
    )
    op.create_index(op.f('ix_dict_doc_type_code'), 'dict_doc_type', ['code'], unique=True)
    op.create_table('request',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('is_resident', sa.Boolean(), nullable=False),
    sa.Column('inn', sa.String(length=60), nullable=True),
    sa.Column('ogrn', sa.String(length=60), nullable=True),
    sa.Column('in_sap', sa.Boolean(), nullable=False),
    sa.Column('sap_num', sa.String(length=20), nullable=True),
    sa.Column('mdm_id', sa.String(length=20), nullable=True),
    sa.Column('blocking', sa.Boolean(), nullable=False),
    sa.Column('from_system', sa.SmallInteger(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('created_by', sa.String(length=30), nullable=False),
    sa.Column('approved_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('approved_by', sa.String(length=30), nullable=True),
    sa.Column('start_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('end_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['from_system'], ['dict_system.code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_request_id'), 'request', ['id'], unique=True)
    op.create_table('dict_type_valid_action',
    sa.Column('doc_type_code', sa.SmallInteger(), nullable=False),
    sa.Column('action_code', sa.SmallInteger(), nullable=False),
    sa.ForeignKeyConstraint(['action_code'], ['dict_action.code'], ),
    sa.ForeignKeyConstraint(['doc_type_code'], ['dict_doc_type.code'], ),
    sa.PrimaryKeyConstraint('doc_type_code', 'action_code')
    )
    op.create_table('request_detail',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('request_id', sa.BigInteger(), nullable=False),
    sa.Column('workflow_code', sa.String(), nullable=False),
    sa.Column('params', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['request_id'], ['request.id'], ),
    sa.ForeignKeyConstraint(['workflow_code'], ['dict_workflow.code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_request_detail_id'), 'request_detail', ['id'], unique=True)
    # ### end Alembic commands ###
    Session = sessionmaker(bind=op.get_bind())
    session = Session()

    dict_actions = [
        models.DictAction(code=1, name='изменение'),
        models.DictAction(code=2, name='сторнирование'),
        models.DictAction(code=3, name='создать последующий'),
        models.DictAction(code=4, name='выравнивание'),
        models.DictAction(code=5, name='отмена выравнивания')
    ]

    dict_systems = [
        models.DictSystem(code=0, name='Support.x5.ru', can_block=True, source_doc=False),
        models.DictSystem(code=1, name='SAP ERP', can_block=False, source_doc=True),
        models.DictSystem(code=2, name='СЭД', can_block=False, source_doc=True),
        models.DictSystem(code=3, name='ESM', can_block=True, source_doc=False),
    ]

    dict_doc_types = [
        models.DictDocType(code=1, name='FI', fullname='бухгалтерский документ', system_code=1),
        models.DictDocType(code=2, name='MM', fullname='заказ на закупку', system_code=1),
        models.DictDocType(code=3, name='CTR', fullname='договор (контракт)', system_code=2),
        models.DictDocType(code=4, name='ADD', fullname='дополнительное соглашение', system_code=2),
    ]

    dict_operations = [
        models.DictOperation(sap_code='P1', sap_name='ТОВАР', name='Товарные закупки', blocking=True),
        models.DictOperation(sap_code='P2', sap_name='НЕТОВАР', name='Нетоварные закупки', blocking=True),
        models.DictOperation(sap_code='P3', sap_name='ОПЕРАЦ', name='Операционные расходы', blocking=True),
        models.DictOperation(sap_code='P4', sap_name='КАПИТАЛ', name='Капитальные расходы (CAPEX)', blocking=True),
        models.DictOperation(sap_code='P5', sap_name='АРЕНДА', name='Аренда', blocking=True),
        models.DictOperation(sap_code='P6', sap_name='КОММУНАЛ', name='Коммунальные платежи', blocking=True),
        models.DictOperation(sap_code='P7', sap_name='НАЛОГИ', name='Налоги', blocking=False),
        models.DictOperation(sap_code='P8', sap_name='ПЕРСОНАЛ', name='Расчеты с персоналом', blocking=False),
        models.DictOperation(sap_code='P81', sap_name='ЗАРПЛАТА', name='Расчеты по зарплате', blocking=False),
        models.DictOperation(sap_code='P82', sap_name='ИСПЛНЛСТ', name='Расчеты по исполнительным листам (алименты)',
                             blocking=False),
        models.DictOperation(sap_code='P9', name='Не товарные закупки ВГО', sap_name='ВГ НЕТОВАР', blocking=True),
        models.DictOperation(sap_code='P91', name='Товарные закупки ВГО', sap_name='ВГ ТОВАР', blocking=True),
        models.DictOperation(sap_code='P99', name='Переводы внутри БЕ', sap_name='ВГ ВНТР БЕ', blocking=True),
        models.DictOperation(sap_code='S1', name='Поступления', sap_name='ПОСТУПЛ', blocking=True),
        models.DictOperation(sap_code='S2', name='Поступления ВГО', sap_name='ВГ ПОСТУПЛ', blocking=True)
    ]

    dict_doc_types_valid_actions = [
        models.DictTypeValidAction(doc_type_code=1, action_code=1),
        models.DictTypeValidAction(doc_type_code=1, action_code=2),
        models.DictTypeValidAction(doc_type_code=1, action_code=3),
        models.DictTypeValidAction(doc_type_code=1, action_code=4),
        models.DictTypeValidAction(doc_type_code=1, action_code=5),
        models.DictTypeValidAction(doc_type_code=2, action_code=1),
        models.DictTypeValidAction(doc_type_code=2, action_code=2),
        models.DictTypeValidAction(doc_type_code=2, action_code=3),
        models.DictTypeValidAction(doc_type_code=3, action_code=1),
        models.DictTypeValidAction(doc_type_code=4, action_code=1),
    ]

    dict_workflows = [
        models.DictWorkflow(code='FULL', name='полная блокировка/разблокировка'),
        models.DictWorkflow(code='SUM', name='блокировка/разблокировка по сумме'),
        models.DictWorkflow(code='OPER', name='блокировка/разблокировка по виду операции (гфд)'),
        models.DictWorkflow(code='UNIT', name='блокировка/разблокировка по отдельным балансовым единицам (БЕ)'),
        models.DictWorkflow(code='DOC', name='блокировка/разблокировка по номеру документа в указанной системе'),
        models.DictWorkflow(code='ACC', name='блокировка/разблокировка по бух.счету'),
    ]

    session.bulk_save_objects(dict_actions)
    session.bulk_save_objects(dict_systems)
    session.bulk_save_objects(dict_doc_types)
    session.bulk_save_objects(dict_operations)
    session.bulk_save_objects(dict_doc_types_valid_actions)
    session.bulk_save_objects(dict_workflows)
    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_request_detail_id'), table_name='request_detail')
    op.drop_table('request_detail')
    op.drop_table('dict_type_valid_action')
    op.drop_index(op.f('ix_request_id'), table_name='request')
    op.drop_table('request')
    op.drop_index(op.f('ix_dict_doc_type_code'), table_name='dict_doc_type')
    op.drop_table('dict_doc_type')
    op.drop_index(op.f('ix_dict_workflow_code'), table_name='dict_workflow')
    op.drop_table('dict_workflow')
    op.drop_index(op.f('ix_dict_system_code'), table_name='dict_system')
    op.drop_table('dict_system')
    op.drop_index(op.f('ix_dict_operation_sap_code'), table_name='dict_operation')
    op.drop_table('dict_operation')
    op.drop_index(op.f('ix_dict_action_code'), table_name='dict_action')
    op.drop_table('dict_action')
    # ### end Alembic commands ###
